package com.adept.ims.authorization.web;

import com.adept.ims.authorization.database.pojo.RoleService;
import com.adept.ims.authorization.service.RolesService;

import com.adept.ims.authorization.validator.RoleServiceValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.bind.WebDataBinder;

/**
 * JavaBean Form controller that is used to edit an existing <code>Trust</code>.
 */
@Controller
@RequestMapping("/authorization/updateRoleService.do")
@SessionAttributes(types = RoleService.class)
public class UpdateRoleServiceForm {

    private final RolesService rolesService;

    @Autowired
    public UpdateRoleServiceForm(RolesService rolesService) {
        this.rolesService = rolesService;
    }

    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields(new String[]{"id"});
    }

    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(@RequestParam("id") long roleServiceId, Model model) {
        RoleService roleService = this.rolesService.get(roleServiceId);
        model.addAttribute(roleService);
        return "authorization/updateRoleService";
    }

    @RequestMapping(method = RequestMethod.POST)
    public String processSubmit(@RequestParam("mode") String addMode,
            @ModelAttribute RoleService roleService, BindingResult result, Model model, SessionStatus status) {

        if (addMode.trim().equals("cancel")) {
            return "redirect:findRoleService.do";
        } else if (addMode.trim().equals("delete")) {
            this.rolesService.remove(roleService.getId());
            return "redirect:deleteConfirmRoleService.do?roleServiceId="+roleService.getId();
        }

        new RoleServiceValidator().validate(roleService, result);
        if (result.hasErrors()) {
            return "authorization/updateRoleService";
        } else {
            this.rolesService.update(roleService);
            status.setComplete();
           roleService.setNew(false);
            model.addAttribute("roleService", roleService);
            return "authorization/showRoleService";
        }
    }
}
