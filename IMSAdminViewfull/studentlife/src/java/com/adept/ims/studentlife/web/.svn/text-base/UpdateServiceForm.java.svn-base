package com.adept.ims.authorization.web;

import com.adept.ims.authorization.database.pojo.Service;
import com.adept.ims.authorization.service.AuthorizationService;

import com.adept.ims.authorization.validator.ServiceValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.bind.WebDataBinder;

/**
 * JavaBean Form controller that is used to edit an existing <code>Trust</code>.
 */
@Controller
@RequestMapping("/authorization/updateService.do")
@SessionAttributes(types = Service.class)
public class UpdateServiceForm {

    private final AuthorizationService authorizationService;

    @Autowired
    public UpdateServiceForm(AuthorizationService authorizationService) {
        this.authorizationService = authorizationService;
    }

    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields(new String[]{"id"});
    }

    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(@RequestParam("id") long serviceId, Model model) {
        Service service = this.authorizationService.get(serviceId);
        model.addAttribute(service);
        return "authorization/updateService";
    }

    @RequestMapping(method = RequestMethod.POST)
    public String processSubmit(@RequestParam("mode") String addMode,
            @ModelAttribute Service service, BindingResult result, Model model, SessionStatus status) {

        if (addMode.trim().equals("cancel")) {
            return "redirect:findService.do";
        } else if (addMode.trim().equals("delete")) {
            this.authorizationService.remove(service.getId());
            return "redirect:deleteConfirmService.do?serviceId="+service.getId();
        }

        new ServiceValidator().validate(service, result);
        if (result.hasErrors()) {
            return "authorization/updateService";
        } else {
            this.authorizationService.update(service);
            status.setComplete();
            service.setNew(false);
            model.addAttribute("service", service);
            return "authorization/showService";
        }
    }
}
