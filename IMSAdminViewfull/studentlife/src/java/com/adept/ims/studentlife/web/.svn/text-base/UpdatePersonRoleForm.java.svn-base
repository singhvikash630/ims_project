package com.adept.ims.authorization.web;

import com.adept.ims.authorization.database.pojo.PersonRole;
import com.adept.ims.authorization.service.PersonRoleService;

import com.adept.ims.authorization.validator.PersonRoleValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.bind.WebDataBinder;

/**
 * JavaBean Form controller that is used to edit an existing <code>Trust</code>.
 */
@Controller
@RequestMapping("/authorization/updatePersonRole.do")
@SessionAttributes(types = PersonRole.class)
public class UpdatePersonRoleForm {

    private final PersonRoleService personRoleService;

    @Autowired
    public UpdatePersonRoleForm(PersonRoleService personRoleService) {
        this.personRoleService = personRoleService;
    }

    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields(new String[]{"id"});
    }

    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(@RequestParam("id") long personId, Model model) {
        PersonRole personRole = this.personRoleService.get(personId);
        model.addAttribute(personRole);
        return "authorization/updatePersonRole";
    }

    @RequestMapping(method = RequestMethod.POST)
    public String processSubmit(@RequestParam("mode") String addMode,
            @ModelAttribute PersonRole personRole, BindingResult result, Model model, SessionStatus status) {

        if (addMode.trim().equals("cancel")) {
            return "redirect:findPersonRole.do";
        } else if (addMode.trim().equals("delete")) {
            this.personRoleService.remove(personRole.getId());
            return "redirect:deleteConfirmPersonRole.do?personId="+personRole.getId();
        }

        new PersonRoleValidator().validate(personRole, result);
        if (result.hasErrors()) {
            return "authorization/updatePersonRole";
        } else {
            this.personRoleService.update(personRole);
            status.setComplete();
           personRole.setNew(false);
            model.addAttribute("personRole", personRole);
            return "authorization/showPersonRole";
        }
    }
}
